/*
 *  Hydro-Quebec Dynamic Pricing App
 *  Project URL: https://github.com/NelsonClark/Hubitat/tree/main/Apps/Hydro_Quebec_Dynamic_Pricing
 *  Copyright 2022 Nelson Clark
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 * 
 *  Special thanks to Rachid Aberkan for making a useable API for HQ Events
 *
 *
 *
 *  Versions:
 *
 *  
 *  0.2.0 - 2022/02/06 - First public Beta release
 *  0.1.0 - 2021/12/20 - Initial Beta release private
 *
 */


def setVersion(){
    state.name = "Hydro-Quebec Dynamic Pricing"
    state.version = "0.2.0"
    state.apiUrl = "https://api.didshwa.com/v3/HydroEventCritique"
}


definition(
	name: "Hydro-Quebec Dynamic Pricing",
	namespace: "nclark",
	author: "Nelson Clark",
	description: "Help maximise your return when opted in Hydro Quebec Winter Credit Option and Rate Flex D",
	category: "Green Living",
	iconUrl: "https://raw.githubusercontent.com/NelsonClark/Hubitat/main/Apps/Hydro-Quebec_Dynamic_Pricing/Hydro-Quebec_Dynamic_Pricing-logo-small.png",
	iconX2Url: "https://raw.githubusercontent.com/NelsonClark/Hubitat/main/Apps/Hydro-Quebec_Dynamic_Pricing/Hydro-Quebec_Dynamic_Pricing-logo.png",
)


preferences {
	page(name: "pageConfig")
}


def pageConfig() {
	// Let's just set a few things before starting
    setVersion()
    def displayUnits = getDisplayUnits()
	installed = false
    
    if (!state.deviceID) {
        installed = true
    }
	
    
	dynamicPage(name: "", title: "", install: true, uninstall: true, refreshInterval:0) {
	

        section("<b>$state.name</b> ver. $state.version"){
            if (state.stopped) {    
                paragraph "This app has been stopped, press <b>start</b> to resume normal operation."
                input name: "btnStart", type: "button", title: "  Start  "
            } else {
                paragraph "You can stop this app when not needed for long periods to save resouces."
                input name: "btnStop", type: "button", title: "  Stop  "
            }
            paragraph "<br><br>"
        }
        
        section("Morning events...", hideable: true, hidden : true){
		    paragraph "<b>Select outlet(s)/switche(s) to turn off durring a morning event.</b>"
		    input "eventMorningSwitches", "capability.switch", title: "Switches", multiple: true
		
            paragraph "<b>Select thermostats to turn <i>OFF</i> durring a morning event.</b>"
			input "eventMorningThermostatsOff", "capability.thermostat", title: "Thermostats", multiple: true
            
            paragraph "<b>Select thermostats to turn <i>DOWN</i> durring a morning event.</b>"
			input "eventMorningThermostats", "capability.thermostat", title: "Thermostats", multiple: true
		    input "eventMorningDegrees", "number", title: "Number of degrees $displayUnits to drop from current setting", required:true, defaultValue:3, submitOnChange:true
        }

        section("Evening events...", hideable: true, hidden : true){
            paragraph "<b>Select outlet(s)/switche(s) to turn off durring an evening event.</b>"
			input "eventEveningSwitches", "capability.switch", title: "Switches", multiple: true

		    paragraph "<b>Select thermostats to turn <i>OFF</i> durring an evening event.</b>"
			input "eventEveningThermostatsOff", "capability.thermostat", title: "Thermostats", multiple: true

            paragraph "<b>Select thermostats to turn <i>DOWN</i> durring an evening event.</b>"
			input "eventEveningThermostats", "capability.thermostat", title: "Thermostats", multiple: true
		    input "eventEveningDegrees", "number", title: "Number of degrees $displayUnits to drop from current setting", required:true, defaultValue:3, submitOnChange:true
        }
        
        section (title: "Notifications...", hideable: true, hidden: true) {
		    paragraph "<b>Select switch/light reminder to turn on durring events to indicate event state.</b>"
		    input "eventStateSwitch", "capability.switch", title: "Switches", multiple: false

            paragraph "<b>Devices to send notifications to.</b>"
            input "sendPushMessage", "capability.notification", title: "Send a Pushover notification", multiple:true, required:false, submitOnChange:true
            if(sendPushMessage) {
                paragraph "<b>Events to send:</b> Select events to send to the selected notification devices."
                input "startMorningEventPush", "bool", title: "Morning Event Start Report", defaultValue:false, submitOnChange:true, width:6
                input "endMorningEventPush", "bool", title: "Morning Event End Report", defaultValue:false, submitOnChange:true, width:6
                input "startEveningEventPush", "bool", title: "Evening Event Start Report", defaultValue:false, submitOnChange:true, width:6
                input "endEveningEventPush", "bool", title: "Evening Event End Report", defaultValue:false, submitOnChange:true, width:6
                input "newEventsPush", "bool", title: "New Events Added Report", defaultValue:false, submitOnChange:true, width:6
                input "restartEventRecoveryPush", "bool", title: "Restart Event Recovery Report (if enabled)", defaultValue:false, submitOnChange:true, width:6
             }
  		}
        
        section(title: "Advanced Settings:", hideable: true, hidden : false){
		    paragraph "<b>Select switch to disable Morning events (this can be a virtual switch).</b>"
		    input "eventMorningDisableSwitch", "capability.switch", title: "Switches", multiple: false

            paragraph "<b>Select switch to disable Evening events (this can be a virtual switch).</b>"
		    input "eventEveningDisableSwitch", "capability.switch", title: "Switches", multiple: false

            input "restartEventRecovery", "bool", title: "Hub restart event recovery.", defaultValue:true, submitOnChange:true, width:6

            if (state.testMode) {
                input name: "btnOne", type: "button", title: "Start Morning Event"
                input name: "btnTwo", type: "button", title: "End Morning Event"
                input name: "btnThree", type: "button", title: "Test API Poling"
                input "testJSON1", "bool", title: "Use test JSON tomorrow", defaultValue:false, submitOnChange:true, width:6
                input "testJSON2", "bool", title: "Use test JSON clear", defaultValue:false, submitOnChange:true, width:6
            }
        }

        section(title: "Log Settings...", hideable: true, hidden: true) {
			input (name: "logLevel", type: "enum", title: "Live Logging Level: Messages with this level and higher will be logged", options: [[0: 'Disabled'], [1: 'Error'], [2: 'Warning'], [3: 'Info'], [4: 'Debug'], [5: 'Trace']], defaultValue: 3)
			input "logDropLevelTime", "decimal", title: "Drop down to Info Level Minutes", required: true, defaultValue: 5
		}

	}
}


def installed() {

    state.currentMode = "Normal"
    
    initialize()
}


def updated() {

   	// Log level was set to a higher level than 3, drop level to 3 in x number of minutes
	if (settings.logLevel > 3) {
		logger("trace", "Initialize Log Level drop in $settings.logDropLevelTime minutes")
		runIn(settings.logDropLevelTime.toInteger() * 60, logsDropLevel)
	}

    
    
    initialize() 
}


def initialize() {

    // Subscribe to Hub restarts so we can make sure events are dealt with correctly
    subscribe(location, "systemStart", hubRestartHandler)
    
    
    // Schedule to start polling every day the API
    schedule("51 14 13 ? * * *", startPolling, [overwrite: true])
    
    

}


def uninstalled() {
    unsubscribe()
    unschedule()
}


//************************************************************
// startPolling
//     Schedule polling every 15 minutes until we find new data
//
// Signature(s)
//     startPolling()
//
// Parameters
//     None
//
// Returns
//     None
//
//************************************************************
def hubRestartHandler(evt) {
    logger("trace", "hubRestartHandler")
    // Hub has restarted, are there events that we missed and should we do something with it...
    if (!restartEventRecovery) {
        logger("warn", "Hub has restarted but the hub restart checking for events feature is not selected.")
        exit
    } 
    
    logger("warn", "Hub has restarted but the checking events feature has not yet been implemented.")
    

    //Go through all events and see if we are within an event period

    
}


//************************************************************
// startPolling
//     Schedule polling every 15 minutes until we find new data
//
// Signature(s)
//     startPolling()
//
// Parameters
//     None
//
// Returns
//     None
//
//************************************************************
def startPolling() {
    logger("trace", "startPoll")
    runEvery15Minutes(poll)        
}


//************************************************************
// poll
//     Poll API
//
// Signature(s)
//     poll()
//
// Parameters
//     None
//
// Returns
//     None
//
//************************************************************
def poll() {
    logger("trace", "poll")
	def requestParams = [ uri: state.apiUrl]
	logger("debug", "Poll Api: $requestParams")
	asynchttpGet("pollHandler", requestParams)
}


//************************************************************
// pollHandler
//     Handle polled data and do what is needed whit it
//
// Signature(s)
//     pollHandler(resp, data)
//
// Parameters
//     None
//
// Returns
//     None
//
//************************************************************
def pollHandler(resp, data) {
	logger("trace", "pollHandler")
    
    if(resp.getStatus() == 200 || resp.getStatus() == 207) {
        logger("debug", "Poll Api Successful")
        
        if (state.apiData == resp.data) {
            logger("debug", "API data has not changed, nothing to do")
            
            //Let's see if we are after 23:00, if so let's stop poling, for sure no new data.
            currTime = new Date()
            if (currTime > timeToday("23:00")) {
                unschedule(poll)
            }
            exit
        } else {
            //Let's save new data to state variable and see what to do
            state.apiData = resp.data
            logger("debug", "New API data, let's see what's new")
            unschedule(poll)
            handleHQEvents()            
        }
	} else {
		//Error while poling API, no problem we will poll it again in 15 minutes
        logger("warn", "Poll Api error: did not return data: $resp")
        
	}
}


//************************************************************
// handleHQEvents
//     Handle Hydro Quebec events when they appear in the API
//
// Signature(s)
//     handleHQEvents()
//
// Parameters
//     None
//
// Returns
//     None
//
//************************************************************
def handleHQEvents() {
    logger("trace", "HandleHQEvents")
    
    response = parseJson(state.apiData)    
    
    def startWinterPeriod = Date.parse("yyyy-MM-dd'T'HH:mm:ss", response.data.info.dateDebutPeriodeHiver.replace(".000+0000",""))
    def endWinterPeriod = Date.parse("yyyy-MM-dd'T'HH:mm:ss", response.data.info.dateFinPeriodeHiver.replace(".000+0000",""))
    def currDate = new Date()

    //Check to see if we are within the period set by power company
    if (timeOfDayIsBetween(startWinterPeriod, endWinterPeriod, currDate)) {
        logger("debug", "We are within the Winter Period, continue...")
        
        //Are there new events
        if (response.data.tomorrow) {
            newEventsPush = ""
            
            for(eventInfo in response.data.tomorrow) {
                
                //Let's parse event info so we can schedule it, send info to logs or even to a device
                eventStartPeriodISO = "$eventInfo.date" + "T" + "$eventInfo.heureDebut"
                eventStartPeriod = Date.parse("yyyy-MM-dd'T'HH:mm:ss", eventStartPeriodISO)
                eventEndPeriodISO = "$eventInfo.date" + "T" + "$eventInfo.heureFin"
                eventEndPeriod = Date.parse("yyyy-MM-dd'T'HH:mm:ss", eventEndPeriodISO)
                eventDate = eventInfo.date.split('-')
                eventStartTime = eventInfo.heureDebut.split(':')
                eventEndTime = eventInfo.heureFin.split(':')
                
                logger("debug", "$eventStartPeriod to $eventEndPeriod")

                //We now need this info as granular as possible so we can schedule using CRON
                eventYear = eventDate[0]
                eventMonth = eventDate[1]
                eventDay = eventDate[2]
                eventStartHour = eventStartTime[0]
                eventStartMinute = eventStartTime[1]
                eventStartSecond = eventStartTime[2]
                eventEndHour = eventEndTime[0]
                eventEndMinute = eventEndTime[1]
                eventEndSecond = eventEndTime[2]
                
                //Add event info to log and notification text
                if (!newEventsPush) {
                    newEventsPush = "New events added for $eventYear/$eventMonth/$eventDay from "
                } else {
                    newEventsPush = newEventsPush + " & " 
                }
 
                //Let's program events 
                if (eventStartHour.toInteger() < 12) {
                    schedule("$eventStartSecond $eventStartMinute $eventStartHour $eventDay $eventMonth ? $eventYear", setHouseInMorningEventMode, [overwrite: false])
                    schedule("$eventEndSecond $eventEndMinute $eventEndHour $eventDay $eventMonth ? $eventYear", setHouseInMorningNormalMode, [overwrite: false])
                    newEventsPush = newEventsPush + "$eventStartHour:$eventStartMinute:$eventStartSecond to $eventEndHour:$eventEndMinute:$eventEndSecond"
                } else {
                    schedule("$eventStartSecond $eventStartMinute $eventStartHour $eventDay $eventMonth ? $eventYear", setHouseInEveningEventMode, [overwrite: false])
                    schedule("$eventEndSecond $eventEndMinute $eventEndHour $eventDay $eventMonth ? $eventYear", setHouseInEveningNormalMode, [overwrite: false])
                    newEventsPush = newEventsPush + "$eventStartHour:$eventStartMinute:$eventStartSecond to $eventEndHour:$eventEndMinute:$eventEndSecond"
                }
            }
            
            //Send and log info if required
            if(sendPushMessage && newEventsPush) {
                sendPushMessage.deviceNotification(newEventsPush)
            }
            logger("debug", newEventsPush)
        } else {
            logger("debug", "No new events.")
        }
    
    }    
}


//************************************************************
// setHouseInMorningEventMode
//     Set the different outlets, thermostats, etc for morning mode
//
// Signature(s)
//     setHouseInMorningEventMode()
//
// Parameters
//     None
//
// Returns
//     None
//
//************************************************************
def setHouseInMorningEventMode() {
    logger("trace", "setHouseInMorningEventMode")
    
    if (eventMorningDisableSwitch) {
        logger("warn", "Morning event disable activated, skipping this event!")
        exit
    }
    
    state.currentMode = "MorningEvent"
    
    if(sendPushMessage && startMorningEventPush) {
        sendPushMessage.deviceNotification("Morning event fired!")
    }
    
    def previousSettings = [:]
    
    for(eventSwitch in eventMorningSwitches) {
        previousSettings.put("$eventSwitch",eventSwitch.currentValue("switch"))
        eventSwitch.off()
    }

    for(thermostat in eventMorningThermostatsOff) {
        previousSettings.put("$thermostat",thermostat.currentValue("thermostatMode"))
        if (thermostat.currentValue("thermostatMode") == "off") {      
            logger("debug", "$thermostat already off")
        } else {
            thermostat.setThermostatMode("off")
            logger("debug", "$thermostat turned off")
        }
    }

    for(thermostat in eventMorningThermostats) {
        previousSettings.put("$thermostat",thermostat.currentValue("heatingSetpoint"))
        newSetpoint = thermostat.currentValue("heatingSetpoint") - eventEveningDegrees.toInteger()
        thermostat.setHeatingSetpoint(newSetpoint)
    }
    
    state.previousSettings = previousSettings

    app.updateLabel("Hydro Quebec Dynamic Pricing <span style='color:green'>Morning Event in progress</span>")

}


//************************************************************
// setHouseInEveningEventMode
//     Set the different outlets, thermostats, etc for evening mode
//
// Signature(s)
//     setHouseInEveningEventMode()
//
// Parameters
//     None
//
// Returns
//     None
//
//************************************************************
def setHouseInEveningEventMode() {
    logger("trace", "setHouseInEveningEventMode")

    if (eventEveningDisableSwitch) {
        logger("warn", "Evening event disable activated, skipping this event!")
        exit
    }

    state.currentMode = "EveningEvent"

    if(sendPushMessage && StartEveningEventPush) {
        sendPushMessage.deviceNotification("Evening event fired!")
    }
    
    def previousSettings = [:]
    
    for(eventSwitch in eventEveningSwitches) {
        previousSettings.put("$eventSwitch",eventSwitch.currentValue("switch"))
        eventSwitch.off()
    }

    for(thermostat in eventEveningThermostatsOff) {
        previousSettings.put("$thermostat",thermostat.currentValue("thermostatMode"))
        if (thermostat.currentValue("thermostatMode") == "off") {      
            logger("debug", "$thermostat already off")
        } else {
            thermostat.setThermostatMode("off")
            logger("debug", "$thermostat turned off")
        }
    }

    for(thermostat in eventEveningThermostats) {
        previousSettings.put("$thermostat",thermostat.currentValue("heatingSetpoint"))
        newSetpoint = thermostat.currentValue("heatingSetpoint") - eventEveningDegrees.toInteger()
        thermostat.setHeatingSetpoint(newSetpoint)
    }

    state.previousSettings = previousSettings

    app.updateLabel("Hydro Quebec Dynamic Pricing <span style='color:green'>Evening Event in progress</span>")

}


//************************************************************
// setHouseInMorningNormalMode
//     Set the different outlets, thermostats, etc for normal mode
//
// Signature(s)
//     setHouseInMorningNormalMode()
//
// Parameters
//     None
//
// Returns
//     None
//
//************************************************************
def setHouseInMorningNormalMode() {
    logger("trace", "setHouseInMorningNormalMode")
    
    if (eventMorningDisableSwitch) {
        exit
    }

    state.currentMode = "Normal"

    if(sendPushMessage && endMorningEventPush) {
        sendPushMessage.deviceNotification("Back to normal!")
    }
    
    for(eventSwitch in eventMorningSwitches) {
        def switchState = state.previousSettings.find{ it.key == "$eventSwitch" }?.value
        if(switchState && switchState == "on") {
            logger("debug", "$eventSwitch turned $switchState")
            eventSwitch.on()
        } else {
            logger("debug", "$eventSwitch not changed")
        }
    }

    for(thermostat in eventMorningThermostatsOff) {
        def thermostatMode = state.previousSettings.find{ it.key == "$thermostat" }?.value
        if (thermostatMode) {
            thermostat.setThermostatMode("$thermostatMode")
            logger("debug", "$thermostat mode set to $thermostatMode")
        }
    }

    for(thermostat in eventMorningThermostats) {
        def thermostatTemp = state.previousSettings.find{ it.key == "$thermostat" }?.value
        if (thermostatTemp) {
            thermostat.setHeatingSetpoint(thermostatTemp)
            logger("debug", "$thermostat heating setpoint set to $thermostatTemp")
        }
    }
    
    state.remove("previousSettings")
    app.updateLabel("Hydro Quebec Dynamic Pricing")
    
}


//************************************************************
// setHouseInEveningNormalMode
//     Set the different outlets, thermostats, etc for normal mode
//
// Signature(s)
//     setHouseInEveningNormalMode()
//
// Parameters
//     None
//
// Returns
//     None
//
//************************************************************
def setHouseInEveningNormalMode() {
    logger("trace", "setHouseInEveningNormalMode")

    if (eventEveningDisableSwitch) {
        exit
    }

    state.currentMode = "Normal"

    if(sendPushMessage && endEveningEventPush) {
        sendPushMessage.deviceNotification("Back to normal!")
    }

    for(eventSwitch in eventEveningSwitches) {
        def switchState = state.previousSettings.find{ it.key == "$eventSwitch" }?.value
        if(switchState && switchState == "on") {
            logger("debug", "$eventSwitch turned $switchState")
            eventSwitch.on()
        } else {
            logger("debug", "$eventSwitch not changed")
        }
    }

    for(thermostat in eventEveningThermostatsOff) {
         def thermostatMode = state.previousSettings.find{ it.key == "$thermostat" }?.value
        if (thermostatMode) {
            thermostat.setThermostatMode("$thermostatMode")
            logger("debug", "$thermostat mode set to $thermostatMode")
        }
   }

    for(thermostat in eventEveningThermostats) {
        def thermostatTemp = state.previousSettings.find{ it.key == "$thermostat" }?.value
        if (thermostatTemp) {
            thermostat.setHeatingSetpoint(thermostatTemp)
            logger("debug", "$thermostat heating setpoint set to $thermostatTemp")
        }
    }

    state.remove("previousSettings")
    app.updateLabel("Hydro Quebec Dynamic Pricing")

}


//************************************************************
// logger
//     Wrapper function for all logging with level control via preferences
//
// Signature(s)
//     logger(String level, String msg)
//
// Parameters
//     level : Error level string
//     msg : Message to log
//
// Returns
//     None
//
//************************************************************
def logger(level, msg) {

	switch(level) {
		case "error":
			if (settings.logLevel in ["1", "2", "3", "4", "5"]) log.error msg
			break

		case "warn":
			if (settings.logLevel in ["2", "3", "4", "5"]) log.warn msg
			break

		case "info":
			if (settings.logLevel in ["3", "4", "5"]) log.info msg
			break

		case "debug":
			if (settings.logLevel in ["4", "5"]) log.debug msg
			break

		case "trace":
			if (settings.logLevel in ["5"]) log.trace msg
			break

		default:
			log.debug msg
			break
	}
}


//************************************************************
// logsDropLevel
//     Turn down logLevel to 3 in this app/device and log the change
//
// Signature(s)
//     logsDropLevel()
//
// Parameters
//     None
//
// Returns
//     None
//
//************************************************************
def logsDropLevel() {
    app.updateSetting("logLevel", [type: "enum", value: "3"])
	logger("warn","Logging level set to 3")
}


//************************************************************
// getDisplayUnits
//     Get the diplay units
// Signature(s)
//     getDisplayUnits()
// Parameters
//     None
// Returns
//     Formated Units String
//************************************************************
def getDisplayUnits() {
	if (getTemperatureScale() == "C") {
		return "°C"
	} else {
		return "°F"
	}
}


//************************************************************
// appButtonHandler
//     Handle menu button events 
// Signature(s)
//     appButtonHandler(string buttonName)
// Parameters
//     None
// Returns
//     None
//************************************************************
void appButtonHandler(String btn) {
   switch (btn) {
      case 'btnOne':
         logger("info", "Button one pressed")
         setHouseInMorningEventMode()
         break
      case 'btnTwo':
         logger("info", "Button two pressed")
         setHouseInMorningNormalMode()
         break
      case 'btnThree':
         logger("info", "Button three pressed")
         poll()
         break
      default:
         logger("warn","Button not handled")
   }
}


//************************************************************
// *** Hiden menu handlers ***
// Parameters
//     None
// Returns
//     Boolean
//************************************************************
private hideAdvancedSection() {(isInfo || isDebug || isTrace || ifLevel) ? false : true}
private hideLogSection() {(logLevel || logDropLevelTime) ? false : true}
private hideNotificationSection() {(sendPushMessage || startMorningEventPush || endMorningEventPush || startEveningEventPush || endEveningEventPush || newEventsPush || restartEventRecoveryPush) ? false : true}
